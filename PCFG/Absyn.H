#ifndef PCFG_ABSYN_HEADER
#define PCFG_ABSYN_HEADER

#include<string>
#include<vector>

//C++ Abstract Syntax Interface generated by the BNF Converter.
namespace pcfg
{
/********************   TypeDef Section    ********************/

typedef int Integer;
typedef char Char;
typedef double Double;
typedef std::string String;
typedef std::string Ident;




/********************   Forward Declarations    ********************/

class Grammar;
class Rule;
class LHS;
class Prob;
class DRHS;
class RHS;
class BRHS;
class Gram;
class Rul;
class ERul;
class LhsS;
class ProbR;
class ProbA;
class RhsDisjSyms;
class RhsDisjSymsP;
class RhsDisjSymsA;
class RhsDisjTerminal;
class RhsDisj;
class RhsBrhsS;
class RhsBrhsSP;
class RhsBrhsSA;
class RhsBrhsTerminal;
class RhsSymbol;
class RhsSymbolP;
class RhsSymbolA;
class RhsTerminal;
class RhsEpsilon;
class RhsBr;
class RhsBrPlus;
class RhsBrAst;
class ListRule;
class ListRHS;
class ListBRHS;
class ListDRHS;


/********************   Visitor Interfaces    ********************/
class Visitor
{
public:
  virtual ~Visitor() {}
  virtual void visitGrammar(Grammar *p) = 0;
  virtual void visitRule(Rule *p) = 0;
  virtual void visitLHS(LHS *p) = 0;
  virtual void visitProb(Prob *p) = 0;
  virtual void visitDRHS(DRHS *p) = 0;
  virtual void visitRHS(RHS *p) = 0;
  virtual void visitBRHS(BRHS *p) = 0;
  virtual void visitGram(Gram *p) = 0;
  virtual void visitRul(Rul *p) = 0;
  virtual void visitERul(ERul *p) = 0;
  virtual void visitLhsS(LhsS *p) = 0;
  virtual void visitProbR(ProbR *p) = 0;
  virtual void visitProbA(ProbA *p) = 0;
  virtual void visitRhsDisjSyms(RhsDisjSyms *p) = 0;
  virtual void visitRhsDisjSymsP(RhsDisjSymsP *p) = 0;
  virtual void visitRhsDisjSymsA(RhsDisjSymsA *p) = 0;
  virtual void visitRhsDisjTerminal(RhsDisjTerminal *p) = 0;
  virtual void visitRhsDisj(RhsDisj *p) = 0;
  virtual void visitRhsBrhsS(RhsBrhsS *p) = 0;
  virtual void visitRhsBrhsSP(RhsBrhsSP *p) = 0;
  virtual void visitRhsBrhsSA(RhsBrhsSA *p) = 0;
  virtual void visitRhsBrhsTerminal(RhsBrhsTerminal *p) = 0;
  virtual void visitRhsSymbol(RhsSymbol *p) = 0;
  virtual void visitRhsSymbolP(RhsSymbolP *p) = 0;
  virtual void visitRhsSymbolA(RhsSymbolA *p) = 0;
  virtual void visitRhsTerminal(RhsTerminal *p) = 0;
  virtual void visitRhsEpsilon(RhsEpsilon *p) = 0;
  virtual void visitRhsBr(RhsBr *p) = 0;
  virtual void visitRhsBrPlus(RhsBrPlus *p) = 0;
  virtual void visitRhsBrAst(RhsBrAst *p) = 0;
  virtual void visitListRule(ListRule *p) = 0;
  virtual void visitListRHS(ListRHS *p) = 0;
  virtual void visitListBRHS(ListBRHS *p) = 0;
  virtual void visitListDRHS(ListDRHS *p) = 0;


  virtual void visitInteger(Integer x) = 0;
  virtual void visitChar(Char x) = 0;
  virtual void visitDouble(Double x) = 0;
  virtual void visitString(String x) = 0;
  virtual void visitIdent(Ident x) = 0;

};


class Visitable
{
 public:
  virtual ~Visitable() {}
  virtual void accept(Visitor *v) = 0;
};


/********************   Abstract Syntax Classes    ********************/

class Grammar : public Visitable
{
public:
  virtual Grammar *clone() const = 0;

};

class Rule : public Visitable
{
public:
  virtual Rule *clone() const = 0;

};

class LHS : public Visitable
{
public:
  virtual LHS *clone() const = 0;

};

class Prob : public Visitable
{
public:
  virtual Prob *clone() const = 0;

};

class DRHS : public Visitable
{
public:
  virtual DRHS *clone() const = 0;

};

class RHS : public Visitable
{
public:
  virtual RHS *clone() const = 0;

};

class BRHS : public Visitable
{
public:
  virtual BRHS *clone() const = 0;

};



class Gram : public Grammar
{
public:
  ListRule *listrule_;

  Gram(const Gram &);
  Gram &operator=(const Gram &);
  Gram(ListRule *p1);
  ~Gram();
  virtual void accept(Visitor *v);
  virtual Gram *clone() const;
  void swap(Gram &);
};

class Rul : public Rule
{
public:
  Prob *prob_;
  LHS *lhs_;
  ListRHS *listrhs_;

  Rul(const Rul &);
  Rul &operator=(const Rul &);
  Rul(Prob *p1, LHS *p2, ListRHS *p3);
  ~Rul();
  virtual void accept(Visitor *v);
  virtual Rul *clone() const;
  void swap(Rul &);
};

class ERul : public Rule
{
public:

  ERul(const ERul &);
  ERul &operator=(const ERul &);
  ERul();
  ~ERul();
  virtual void accept(Visitor *v);
  virtual ERul *clone() const;
  void swap(ERul &);
};

class LhsS : public LHS
{
public:
  Ident ident_;

  LhsS(const LhsS &);
  LhsS &operator=(const LhsS &);
  LhsS(Ident p1);
  ~LhsS();
  virtual void accept(Visitor *v);
  virtual LhsS *clone() const;
  void swap(LhsS &);
};

class ProbR : public Prob
{
public:
  Double double_;

  ProbR(const ProbR &);
  ProbR &operator=(const ProbR &);
  ProbR(Double p1);
  ~ProbR();
  virtual void accept(Visitor *v);
  virtual ProbR *clone() const;
  void swap(ProbR &);
};

class ProbA : public Prob
{
public:
  Integer integer_;

  ProbA(const ProbA &);
  ProbA &operator=(const ProbA &);
  ProbA(Integer p1);
  ~ProbA();
  virtual void accept(Visitor *v);
  virtual ProbA *clone() const;
  void swap(ProbA &);
};

class RhsDisjSyms : public DRHS
{
public:
  Ident ident_;

  RhsDisjSyms(const RhsDisjSyms &);
  RhsDisjSyms &operator=(const RhsDisjSyms &);
  RhsDisjSyms(Ident p1);
  ~RhsDisjSyms();
  virtual void accept(Visitor *v);
  virtual RhsDisjSyms *clone() const;
  void swap(RhsDisjSyms &);
};

class RhsDisjSymsP : public DRHS
{
public:
  Ident ident_;

  RhsDisjSymsP(const RhsDisjSymsP &);
  RhsDisjSymsP &operator=(const RhsDisjSymsP &);
  RhsDisjSymsP(Ident p1);
  ~RhsDisjSymsP();
  virtual void accept(Visitor *v);
  virtual RhsDisjSymsP *clone() const;
  void swap(RhsDisjSymsP &);
};

class RhsDisjSymsA : public DRHS
{
public:
  Ident ident_;

  RhsDisjSymsA(const RhsDisjSymsA &);
  RhsDisjSymsA &operator=(const RhsDisjSymsA &);
  RhsDisjSymsA(Ident p1);
  ~RhsDisjSymsA();
  virtual void accept(Visitor *v);
  virtual RhsDisjSymsA *clone() const;
  void swap(RhsDisjSymsA &);
};

class RhsDisjTerminal : public DRHS
{
public:
  String string_;

  RhsDisjTerminal(const RhsDisjTerminal &);
  RhsDisjTerminal &operator=(const RhsDisjTerminal &);
  RhsDisjTerminal(String p1);
  ~RhsDisjTerminal();
  virtual void accept(Visitor *v);
  virtual RhsDisjTerminal *clone() const;
  void swap(RhsDisjTerminal &);
};

class RhsDisj : public RHS
{
public:
  ListDRHS *listdrhs_;

  RhsDisj(const RhsDisj &);
  RhsDisj &operator=(const RhsDisj &);
  RhsDisj(ListDRHS *p1);
  ~RhsDisj();
  virtual void accept(Visitor *v);
  virtual RhsDisj *clone() const;
  void swap(RhsDisj &);
};

class RhsSymbol : public RHS
{
public:
  Ident ident_;

  RhsSymbol(const RhsSymbol &);
  RhsSymbol &operator=(const RhsSymbol &);
  RhsSymbol(Ident p1);
  ~RhsSymbol();
  virtual void accept(Visitor *v);
  virtual RhsSymbol *clone() const;
  void swap(RhsSymbol &);
};

class RhsSymbolP : public RHS
{
public:
  Ident ident_;

  RhsSymbolP(const RhsSymbolP &);
  RhsSymbolP &operator=(const RhsSymbolP &);
  RhsSymbolP(Ident p1);
  ~RhsSymbolP();
  virtual void accept(Visitor *v);
  virtual RhsSymbolP *clone() const;
  void swap(RhsSymbolP &);
};

class RhsSymbolA : public RHS
{
public:
  Ident ident_;

  RhsSymbolA(const RhsSymbolA &);
  RhsSymbolA &operator=(const RhsSymbolA &);
  RhsSymbolA(Ident p1);
  ~RhsSymbolA();
  virtual void accept(Visitor *v);
  virtual RhsSymbolA *clone() const;
  void swap(RhsSymbolA &);
};

class RhsTerminal : public RHS
{
public:
  String string_;

  RhsTerminal(const RhsTerminal &);
  RhsTerminal &operator=(const RhsTerminal &);
  RhsTerminal(String p1);
  ~RhsTerminal();
  virtual void accept(Visitor *v);
  virtual RhsTerminal *clone() const;
  void swap(RhsTerminal &);
};

class RhsEpsilon : public RHS
{
public:

  RhsEpsilon(const RhsEpsilon &);
  RhsEpsilon &operator=(const RhsEpsilon &);
  RhsEpsilon();
  ~RhsEpsilon();
  virtual void accept(Visitor *v);
  virtual RhsEpsilon *clone() const;
  void swap(RhsEpsilon &);
};

class RhsBr : public RHS
{
public:
  ListBRHS *listbrhs_;

  RhsBr(const RhsBr &);
  RhsBr &operator=(const RhsBr &);
  RhsBr(ListBRHS *p1);
  ~RhsBr();
  virtual void accept(Visitor *v);
  virtual RhsBr *clone() const;
  void swap(RhsBr &);
};

class RhsBrPlus : public RHS
{
public:
  ListBRHS *listbrhs_;

  RhsBrPlus(const RhsBrPlus &);
  RhsBrPlus &operator=(const RhsBrPlus &);
  RhsBrPlus(ListBRHS *p1);
  ~RhsBrPlus();
  virtual void accept(Visitor *v);
  virtual RhsBrPlus *clone() const;
  void swap(RhsBrPlus &);
};

class RhsBrAst : public RHS
{
public:
  ListBRHS *listbrhs_;

  RhsBrAst(const RhsBrAst &);
  RhsBrAst &operator=(const RhsBrAst &);
  RhsBrAst(ListBRHS *p1);
  ~RhsBrAst();
  virtual void accept(Visitor *v);
  virtual RhsBrAst *clone() const;
  void swap(RhsBrAst &);
};

class RhsBrhsS : public BRHS
{
public:
  Ident ident_;

  RhsBrhsS(const RhsBrhsS &);
  RhsBrhsS &operator=(const RhsBrhsS &);
  RhsBrhsS(Ident p1);
  ~RhsBrhsS();
  virtual void accept(Visitor *v);
  virtual RhsBrhsS *clone() const;
  void swap(RhsBrhsS &);
};

class RhsBrhsSP : public BRHS
{
public:
  Ident ident_;

  RhsBrhsSP(const RhsBrhsSP &);
  RhsBrhsSP &operator=(const RhsBrhsSP &);
  RhsBrhsSP(Ident p1);
  ~RhsBrhsSP();
  virtual void accept(Visitor *v);
  virtual RhsBrhsSP *clone() const;
  void swap(RhsBrhsSP &);
};

class RhsBrhsSA : public BRHS
{
public:
  Ident ident_;

  RhsBrhsSA(const RhsBrhsSA &);
  RhsBrhsSA &operator=(const RhsBrhsSA &);
  RhsBrhsSA(Ident p1);
  ~RhsBrhsSA();
  virtual void accept(Visitor *v);
  virtual RhsBrhsSA *clone() const;
  void swap(RhsBrhsSA &);
};

class RhsBrhsTerminal : public BRHS
{
public:
  String string_;

  RhsBrhsTerminal(const RhsBrhsTerminal &);
  RhsBrhsTerminal &operator=(const RhsBrhsTerminal &);
  RhsBrhsTerminal(String p1);
  ~RhsBrhsTerminal();
  virtual void accept(Visitor *v);
  virtual RhsBrhsTerminal *clone() const;
  void swap(RhsBrhsTerminal &);
};



class ListRule : public Visitable, public std::vector<Rule*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListRule *clone() const;
};

class ListRHS : public Visitable, public std::vector<RHS*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListRHS *clone() const;
};

class ListBRHS : public Visitable, public std::vector<BRHS*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListBRHS *clone() const;
};

class ListDRHS : public Visitable, public std::vector<DRHS*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListDRHS *clone() const;
};


}
#endif
